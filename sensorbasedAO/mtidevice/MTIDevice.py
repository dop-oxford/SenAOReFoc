# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _MTIDevice  
else:
    import _MTIDevice

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


MTI_MAXDEVICES = _MTIDevice.MTI_MAXDEVICES

MTI_SUCCESS = _MTIDevice.MTI_SUCCESS
r""" Last operation/ communication was succesful"""
MTI_ERR_INVALID_HANDLE = _MTIDevice.MTI_ERR_INVALID_HANDLE
r""" Handle is not existing"""
MTI_ERR_INVALID_DEVICEID = _MTIDevice.MTI_ERR_INVALID_DEVICEID
r""" No or wrong device ID"""
MTI_ERR_GENERAL = _MTIDevice.MTI_ERR_GENERAL
r""" General error"""
MTI_ERR_SERIALCOMM = _MTIDevice.MTI_ERR_SERIALCOMM
r""" Communication error ocurred"""
MTI_ERR_SERIALCOMM_READ_TIMEOUT = _MTIDevice.MTI_ERR_SERIALCOMM_READ_TIMEOUT
r""" Communication timed out"""
MTI_ERR_SERIALCOMM_SERIAL_RESET_FAIL = _MTIDevice.MTI_ERR_SERIALCOMM_SERIAL_RESET_FAIL
r""" Reset of the communication failed"""
MTI_ERR_INCORRECT_TARGET_RESPONSE = _MTIDevice.MTI_ERR_INCORRECT_TARGET_RESPONSE
r""" Incorrect response received from target device"""
MTI_ERR_PARAMETER_OUT_OF_RANGE = _MTIDevice.MTI_ERR_PARAMETER_OUT_OF_RANGE
r""" Parameter value out of range"""
MTI_ERR_SOME_PARAMETERS_CANNOT_BE_SET = _MTIDevice.MTI_ERR_SOME_PARAMETERS_CANNOT_BE_SET
r""" Some parameters can not be set in the device"""
MTI_ERR_INVALID_PARAMETER_NAME = _MTIDevice.MTI_ERR_INVALID_PARAMETER_NAME
r""" Invalid parameter name"""
MTI_ERR_CONNECTDEVICE_INVALID_PORTNAME = _MTIDevice.MTI_ERR_CONNECTDEVICE_INVALID_PORTNAME
r""" Invalid port name"""
MTI_ERR_CONNECTDEVICE_PORT_NOT_AVAILABLE = _MTIDevice.MTI_ERR_CONNECTDEVICE_PORT_NOT_AVAILABLE
r""" Port not available"""
MTI_ERR_LOADDEVICEPARAMS_FILE_NOT_FOUND = _MTIDevice.MTI_ERR_LOADDEVICEPARAMS_FILE_NOT_FOUND
r""" INI file not found"""
MTI_BLOCKING_MODE_ERR = _MTIDevice.MTI_BLOCKING_MODE_ERR

MTI_BLOCKING_MODE_OFF = _MTIDevice.MTI_BLOCKING_MODE_OFF

MTI_BLOCKING_MODE_ON = _MTIDevice.MTI_BLOCKING_MODE_ON

HardwareFilterOn = _MTIDevice.HardwareFilterOn
r""" Hardware Filter Available on Driver (Read only)"""
VmaxMEMSDriver = _MTIDevice.VmaxMEMSDriver
r""" Maximum Voltage range of MEMS driver (Read only)"""
DeviceState = _MTIDevice.DeviceState
r""" 16-Bit register with various device states and flags (Read only)"""
DeviceErrorRegister = _MTIDevice.DeviceErrorRegister
r""" Register for device error states (Read only)"""
USARTBaudRate = _MTIDevice.USARTBaudRate
r""" USART communication Baud Rate - Default of 460kBaud"""
SampleRate = _MTIDevice.SampleRate
r""" Sample Rate of the controller to update MEMS position, DOut, read AIs, etc."""
HardwareFilterBw = _MTIDevice.HardwareFilterBw
r""" Hardware filter cut-off frequency - Recommended by MEMS Datasheet"""
VdifferenceMax = _MTIDevice.VdifferenceMax
r""" Maximum differential voltage - Recommended by MEMS Datasheet"""
Vbias = _MTIDevice.Vbias
r""" Bias Voltage for the MEMS  - Recommended by MEMS Datasheet"""
OutputOffsets = _MTIDevice.OutputOffsets
r""" Offsets for MEMS driver output, Normalized value from -1 to +1"""
DataScale = _MTIDevice.DataScale
r""" Normalized scale of VdifferenceMax MEMS output from 0.0 to 1.0"""
DataRotation = _MTIDevice.DataRotation
r""" Rotation of MEMS output in radians"""
MEMSDriverEnable = _MTIDevice.MEMSDriverEnable
r""" Enable/ disable MEMS driver"""
DigitalOutputEnable = _MTIDevice.DigitalOutputEnable
r""" Enable/ disable digital outputs"""
LaserModulationEnable = _MTIDevice.LaserModulationEnable
r""" Enable/ disable laser modulation at 2x sample rate (for Tracking)"""
BufferOffset = _MTIDevice.BufferOffset
r""" Offset memory buffer"""
DeviceAxes = _MTIDevice.DeviceAxes
r""" Device Axes orientation (Device Parameter Structure)"""
BootSetting = _MTIDevice.BootSetting
r""" Device startup settings (Device Parameter Structure)"""
DataMode = _MTIDevice.DataMode
r""" Defines the data mode for operation (Device Parameter Structure)"""
SyncMode = _MTIDevice.SyncMode
r""" Defines the sync port operation (Device Parameter Structure)"""
DataFormat = _MTIDevice.DataFormat
r""" The format of the data sent to the Controller. Should align with the Controller's firmware."""
FramesPerSecond = _MTIDevice.FramesPerSecond

InterpolationType = _MTIDevice.InterpolationType

WaveformType = _MTIDevice.WaveformType

Normal = _MTIDevice.Normal
r""" Normal X,Y Axes Definition"""
FlipXY = _MTIDevice.FlipXY
r""" Flip both axes"""
MirrorY = _MTIDevice.MirrorY
r""" Mirror Y axis"""
MirrorY_FlipXY = _MTIDevice.MirrorY_FlipXY
r""" Mirror Y, flip X with Y axis"""
MirrorX = _MTIDevice.MirrorX
r""" Mirror X axis"""
MirrorX_FlipXY = _MTIDevice.MirrorX_FlipXY
r""" Mirror X, flip X with Y axis"""
MirrorX_MirrorY = _MTIDevice.MirrorX_MirrorY
r""" Mirror X,Y axes"""
MirrorX_MirrorY_FlipXY = _MTIDevice.MirrorX_MirrorY_FlipXY
r""" Mirror and flip both axes"""
Sample_Output = _MTIDevice.Sample_Output
r""" Output mode at sample rate (default) (Continuous Run)"""
Sample_And_Analog_Input_Buffer = _MTIDevice.Sample_And_Analog_Input_Buffer
r""" Output mode for sampling analog input signals into buffer while outputting samples (Single Run)"""
Keypoint = _MTIDevice.Keypoint
r""" Output mode keypoints"""
Text = _MTIDevice.Text
r""" Output mode text"""
Waveform = _MTIDevice.Waveform
r""" Output mode waveforms"""
Analog_Input_To_Output = _MTIDevice.Analog_Input_To_Output
r""" Output mode passing analog inputs (+/-10V) to MEMS driver"""
Sample_And_Analog_Input_Stream = _MTIDevice.Sample_And_Analog_Input_Stream
r""" Output mode for streaming analog inputs while outputting samples"""
Sample_And_Analog_Input_Track = _MTIDevice.Sample_And_Analog_Input_Track
r""" Output mode for streaming analog inputs and streaming samples"""
Auto_Track = _MTIDevice.Auto_Track
r""" Automatic tracking"""
Output_DOut0 = _MTIDevice.Output_DOut0
r""" Default digital output levels at pin 0"""
Output_Inverted_DOut0 = _MTIDevice.Output_Inverted_DOut0
r""" Inverted digital output levels at pin 0"""
Output_Sample_Clock = _MTIDevice.Output_Sample_Clock
r""" Output a clock signal at sync connector"""
Output_Start_Trigger = _MTIDevice.Output_Start_Trigger
r""" Output a trigger signal at sync connector"""
External_Sample_Clock = _MTIDevice.External_Sample_Clock
r""" Input a external clock signal at sync connector"""
External_Start_Trigger = _MTIDevice.External_Start_Trigger
r""" Input a start trigger signal at sync connector"""
External_Frame_Trigger = _MTIDevice.External_Frame_Trigger
r""" Input an external trigger signal at sync connector to start single scan of frame"""
Boot_With_Factory_Defaults = _MTIDevice.Boot_With_Factory_Defaults
r""" Boot with factory settings (default)"""
Boot_With_Flash_Device_Params = _MTIDevice.Boot_With_Flash_Device_Params
r""" Boot with (customized) device parameters from flash"""
Boot_With_Flash_Data_And_Autorun = _MTIDevice.Boot_With_Flash_Data_And_Autorun
r""" Boot with (customized) device parameters and data from flash and auto run"""
Boot_With_Flash_Data_No_Autorun = _MTIDevice.Boot_With_Flash_Data_No_Autorun
r""" Boot with (customized) device parameters and data from flash and wait for commands"""
Device_Params = _MTIDevice.Device_Params
r""" Store device parameters in flash"""
Data_In_Buffer = _MTIDevice.Data_In_Buffer
r""" Store data in buffer in flash"""
Standard_XYM = _MTIDevice.Standard_XYM
r""" Standard 5 byte data with 16 bits X, 16 bits Y, 8 bits M"""
Reduced_XYM = _MTIDevice.Reduced_XYM
r""" Reduced length 3 byte data with 12 bits X, 11 bits Y, 1 bits M"""
Reduced_XYRGB = _MTIDevice.Reduced_XYRGB
r""" RGB 5 byte data with 12 bits X, 12 bits Y, 5 bits R, 6 bits G, 5 bits B"""
Standard_XYRGB = _MTIDevice.Standard_XYRGB
r""" RGB 6 byte data with 12 bits X, 12 bits Y, 8 bits R, 8 bits G, 8 bits B"""
Standard_XYMRGB = _MTIDevice.Standard_XYMRGB
r""" RGB 7 byte data with 12 bits X, 12 bits Y, 8 bits M, 8 bits R, 8 bits G, 8 bits B"""
SampleRate_Min = _MTIDevice.SampleRate_Min
r""" Minimum sample rate (Read only firmware)"""
SampleRate_Max = _MTIDevice.SampleRate_Max
r""" Maximum sample rate (Read only firmware)"""
SamplesPerFrame_Min = _MTIDevice.SamplesPerFrame_Min
r""" Minimum samples per frame (Read only firmware)"""
SamplesPerFrame_Max = _MTIDevice.SamplesPerFrame_Max
r""" Maximum samples per frame (Read only firmware)"""
HardwareFilterBw_Min = _MTIDevice.HardwareFilterBw_Min
r""" Minimum hardware filter bandwidth (Read only firmware)"""
HardwareFilterBw_Max = _MTIDevice.HardwareFilterBw_Max
r""" Maximum hardware filter bandwidth (Read only firmware)"""
FramesPerSecond_Min = _MTIDevice.FramesPerSecond_Min
r""" Minimum frames per second (Read only firmware)"""
FramesPerSecond_Max = _MTIDevice.FramesPerSecond_Max
r""" Maximum frames per second (Read only firmware)"""
VdifferenceMax_Min = _MTIDevice.VdifferenceMax_Min
r""" Minimum differential voltage (Read only firmware)"""
VdifferenceMax_Max = _MTIDevice.VdifferenceMax_Max
r""" Maximum differential voltage (Read only firmware)"""
Vbias_Min = _MTIDevice.Vbias_Min
r""" Minimum bias voltage (Read only firmware)"""
Vbias_Max = _MTIDevice.Vbias_Max
r""" Maximum bias voltage (Read only firmware)"""
Threshold = _MTIDevice.Threshold
r""" Analog input voltage threshold to trigger tracking."""
NormalGain = _MTIDevice.NormalGain
r"""
    Tracking gain to follow target - corrections toward the estimated center of the target.
    									Actual gain is applied in the Controller as 2^NormalGain, and therefore NormalGain is often a negative value.
    """
TangentialGain = _MTIDevice.TangentialGain
r"""
    Tracking gain to move along the perimeter of target (Positive is clockwise and negative is counterclockwise).
    									Corrections perpendicular to the estimated vector from current position to the center of the target.
    """
BufferDelay = _MTIDevice.BufferDelay
r"""
    Tracking setting which corrects the time-correlation of XY MEMS positions and the M Digital Output,
    									due to the fact that XY MEMS positions are delayed by filtering.
    """
HitRatio = _MTIDevice.HitRatio
r"""
    The ratio of the MEMS scan (nutation) that should hit/cover the target.
    									(e.g. 1 to fully cover the target, 0.5 to cover half of the target).
    """
EnableSearch = _MTIDevice.EnableSearch
r"""
    Toggle to enable / disable the search feature.  When all points are below threshold,
    									system can start a search raster pattern or stay in the same position depending on this setting.
    """
EnableOffsetStreaming = _MTIDevice.EnableOffsetStreaming
r"""
    Toggle to enable / disable offset streaming feature.  When on, Controller will continuously stream
    									current X and Y offset positions - during tracking this provides real time azimuth and elevation data about the target location.
    									The other option is to disable this feature and asynchronously poll the positions using the GetDeviceParam( MTIParam::OutputOffsets, n)
    """
EnableTrack = _MTIDevice.EnableTrack
r"""
    Toggle to enable / disable the track feature.  When disabled, position will not be updated based on one nutation cycle.
    									When enabled, offsets are updated to improve centering on the target, at each end of frame/buffer.
    """
FilterNone = _MTIDevice.FilterNone

FilterBessel = _MTIDevice.FilterBessel

FilterButterworth = _MTIDevice.FilterButterworth

FilterChebyshevI = _MTIDevice.FilterChebyshevI

FilterChebyshevII = _MTIDevice.FilterChebyshevII

FilterElliptic = _MTIDevice.FilterElliptic

FilterLegendre = _MTIDevice.FilterLegendre

FilterIIRGeneric = _MTIDevice.FilterIIRGeneric

CurveRose = _MTIDevice.CurveRose

CurveEpicycloid = _MTIDevice.CurveEpicycloid

CurveEpitrochoid = _MTIDevice.CurveEpitrochoid

CurveHypocycloid = _MTIDevice.CurveHypocycloid

CurveHypotrochoid = _MTIDevice.CurveHypotrochoid

ModulationNone = _MTIDevice.ModulationNone

ModulationAmpl = _MTIDevice.ModulationAmpl

ModulationFreq = _MTIDevice.ModulationFreq

WaveSine = _MTIDevice.WaveSine

WaveTriangle = _MTIDevice.WaveTriangle

WaveSquare = _MTIDevice.WaveSquare

MTI_SERIAL_MAXPORTS = _MTIDevice.MTI_SERIAL_MAXPORTS

MTI_BAUDRATE_DEFAULT = _MTIDevice.MTI_BAUDRATE_DEFAULT

MTI_SERIAL_QUEUE_SIZE = _MTIDevice.MTI_SERIAL_QUEUE_SIZE

SERIAL_HARDWARE_FLOW_CONTROL = _MTIDevice.SERIAL_HARDWARE_FLOW_CONTROL

INFINITE = _MTIDevice.INFINITE

MTI_PORT_PREFIX = _MTIDevice.MTI_PORT_PREFIX

class MTISerialIO(object):
    r"""Proxy of C++ MTISerialIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> MTISerialIO"""
        _MTIDevice.MTISerialIO_swiginit(self, _MTIDevice.new_MTISerialIO())
    __swig_destroy__ = _MTIDevice.delete_MTISerialIO

    @staticmethod
    def IsPortAvailable(port):
        r"""
        IsPortAvailable(port) -> bool

        Parameters
        ----------
        port: char const *

        """
        return _MTIDevice.MTISerialIO_IsPortAvailable(port)

    def Open(self, *args):
        r"""
        Open(self, port, baudRate=921600, inQueue=8192*16, outQueue=8192*16) -> long

        Parameters
        ----------
        port: char const *
        baudRate: unsigned int
        inQueue: unsigned int
        outQueue: unsigned int

        """
        return _MTIDevice.MTISerialIO_Open(self, *args)

    def Close(self):
        r"""Close(self) -> long"""
        return _MTIDevice.MTISerialIO_Close(self)

    def Purge(self):
        r"""Purge(self) -> long"""
        return _MTIDevice.MTISerialIO_Purge(self)

    def SetSerialParams(self, baudRate=921600):
        r"""
        SetSerialParams(self, baudRate=921600) -> long

        Parameters
        ----------
        baudRate: unsigned int

        """
        return _MTIDevice.MTISerialIO_SetSerialParams(self, baudRate)

    def SetBlockingMode(self, blockingMode=MTI_BLOCKING_MODE_ON):
        r"""
        SetBlockingMode(self, blockingMode=MTI_BLOCKING_MODE_ON) -> long

        Parameters
        ----------
        blockingMode: int

        """
        return _MTIDevice.MTISerialIO_SetBlockingMode(self, blockingMode)

    def Write(self, *args):
        r"""
        Write(self, pData, lData, lWritten=None, timeout=0xFFFFFFFF) -> long

        Parameters
        ----------
        pData: unsigned char *
        lData: size_t
        lWritten: unsigned int *
        timeout: unsigned int

        """
        return _MTIDevice.MTISerialIO_Write(self, *args)

    def Read(self, *args):
        r"""
        Read(self, pData, lData, lRead=None, timeout=0xFFFFFFFF, blockingMode=MTI_BLOCKING_MODE_ON) -> long

        Parameters
        ----------
        pData: unsigned char *
        lData: size_t
        lRead: unsigned int *
        timeout: unsigned int
        blockingMode: int

        """
        return _MTIDevice.MTISerialIO_Read(self, *args)

    def ReadText(self, *args):
        r"""
        ReadText(self, text, delineationCharacter, timeout=0xFFFFFFFF) -> long

        Parameters
        ----------
        text: char *
        delineationCharacter: unsigned char
        timeout: unsigned int

        """
        return _MTIDevice.MTISerialIO_ReadText(self, *args)

# Register MTISerialIO in _MTIDevice:
_MTIDevice.MTISerialIO_swigregister(MTISerialIO)

def MTISerialIO_IsPortAvailable(port):
    r"""
    MTISerialIO_IsPortAvailable(port) -> bool

    Parameters
    ----------
    port: char const *

    """
    return _MTIDevice.MTISerialIO_IsPortAvailable(port)

MTI_RESETSAMPLES = _MTIDevice.MTI_RESETSAMPLES

MTI_RGBDATASIZE = _MTIDevice.MTI_RGBDATASIZE

class MTIDeviceParams(object):
    r"""Proxy of C++ MTIDeviceParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Success = property(_MTIDevice.MTIDeviceParams_Success_get, _MTIDevice.MTIDeviceParams_Success_set, doc=r"""Success""")
    DeviceName = property(_MTIDevice.MTIDeviceParams_DeviceName_get, _MTIDevice.MTIDeviceParams_DeviceName_set, doc=r"""DeviceName""")
    FirmwareName = property(_MTIDevice.MTIDeviceParams_FirmwareName_get, _MTIDevice.MTIDeviceParams_FirmwareName_set, doc=r"""FirmwareName""")
    CommType = property(_MTIDevice.MTIDeviceParams_CommType_get, _MTIDevice.MTIDeviceParams_CommType_set, doc=r"""CommType""")
    BluetoothMAC = property(_MTIDevice.MTIDeviceParams_BluetoothMAC_get, _MTIDevice.MTIDeviceParams_BluetoothMAC_set, doc=r"""BluetoothMAC""")
    HardwareFilterOn = property(_MTIDevice.MTIDeviceParams_HardwareFilterOn_get, _MTIDevice.MTIDeviceParams_HardwareFilterOn_set, doc=r"""HardwareFilterOn""")
    VmaxMEMSDriver = property(_MTIDevice.MTIDeviceParams_VmaxMEMSDriver_get, _MTIDevice.MTIDeviceParams_VmaxMEMSDriver_set, doc=r"""VmaxMEMSDriver""")
    DeviceState = property(_MTIDevice.MTIDeviceParams_DeviceState_get, _MTIDevice.MTIDeviceParams_DeviceState_set, doc=r"""DeviceState""")
    DeviceErrorRegister = property(_MTIDevice.MTIDeviceParams_DeviceErrorRegister_get, _MTIDevice.MTIDeviceParams_DeviceErrorRegister_set, doc=r"""DeviceErrorRegister""")
    USARTBaudRate = property(_MTIDevice.MTIDeviceParams_USARTBaudRate_get, _MTIDevice.MTIDeviceParams_USARTBaudRate_set, doc=r"""USARTBaudRate""")
    SampleRate = property(_MTIDevice.MTIDeviceParams_SampleRate_get, _MTIDevice.MTIDeviceParams_SampleRate_set, doc=r"""SampleRate""")
    HardwareFilterBw = property(_MTIDevice.MTIDeviceParams_HardwareFilterBw_get, _MTIDevice.MTIDeviceParams_HardwareFilterBw_set, doc=r"""HardwareFilterBw""")
    VdifferenceMax = property(_MTIDevice.MTIDeviceParams_VdifferenceMax_get, _MTIDevice.MTIDeviceParams_VdifferenceMax_set, doc=r"""VdifferenceMax""")
    Vbias = property(_MTIDevice.MTIDeviceParams_Vbias_get, _MTIDevice.MTIDeviceParams_Vbias_set, doc=r"""Vbias""")
    XOffset = property(_MTIDevice.MTIDeviceParams_XOffset_get, _MTIDevice.MTIDeviceParams_XOffset_set, doc=r"""XOffset""")
    YOffset = property(_MTIDevice.MTIDeviceParams_YOffset_get, _MTIDevice.MTIDeviceParams_YOffset_set, doc=r"""YOffset""")
    DataScale = property(_MTIDevice.MTIDeviceParams_DataScale_get, _MTIDevice.MTIDeviceParams_DataScale_set, doc=r"""DataScale""")
    DataRotation = property(_MTIDevice.MTIDeviceParams_DataRotation_get, _MTIDevice.MTIDeviceParams_DataRotation_set, doc=r"""DataRotation""")
    MEMSDriverEnable = property(_MTIDevice.MTIDeviceParams_MEMSDriverEnable_get, _MTIDevice.MTIDeviceParams_MEMSDriverEnable_set, doc=r"""MEMSDriverEnable""")
    DigitalOutputEnable = property(_MTIDevice.MTIDeviceParams_DigitalOutputEnable_get, _MTIDevice.MTIDeviceParams_DigitalOutputEnable_set, doc=r"""DigitalOutputEnable""")
    LaserModulationEnable = property(_MTIDevice.MTIDeviceParams_LaserModulationEnable_get, _MTIDevice.MTIDeviceParams_LaserModulationEnable_set, doc=r"""LaserModulationEnable""")
    BufferOffset = property(_MTIDevice.MTIDeviceParams_BufferOffset_get, _MTIDevice.MTIDeviceParams_BufferOffset_set, doc=r"""BufferOffset""")
    DeviceAxes = property(_MTIDevice.MTIDeviceParams_DeviceAxes_get, _MTIDevice.MTIDeviceParams_DeviceAxes_set, doc=r"""DeviceAxes""")
    BootSetting = property(_MTIDevice.MTIDeviceParams_BootSetting_get, _MTIDevice.MTIDeviceParams_BootSetting_set, doc=r"""BootSetting""")
    DataMode = property(_MTIDevice.MTIDeviceParams_DataMode_get, _MTIDevice.MTIDeviceParams_DataMode_set, doc=r"""DataMode""")
    SyncMode = property(_MTIDevice.MTIDeviceParams_SyncMode_get, _MTIDevice.MTIDeviceParams_SyncMode_set, doc=r"""SyncMode""")
    DataFormat = property(_MTIDevice.MTIDeviceParams_DataFormat_get, _MTIDevice.MTIDeviceParams_DataFormat_set, doc=r"""DataFormat""")
    DeviceLimits = property(_MTIDevice.MTIDeviceParams_DeviceLimits_get, _MTIDevice.MTIDeviceParams_DeviceLimits_set, doc=r"""DeviceLimits""")

    def __init__(self):
        r"""__init__(self) -> MTIDeviceParams"""
        _MTIDevice.MTIDeviceParams_swiginit(self, _MTIDevice.new_MTIDeviceParams())
    __swig_destroy__ = _MTIDevice.delete_MTIDeviceParams

# Register MTIDeviceParams in _MTIDevice:
_MTIDevice.MTIDeviceParams_swigregister(MTIDeviceParams)

class MTIDeviceParamLimits(object):
    r"""Proxy of C++ MTIDeviceParams::MTIDeviceParamLimits class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SampleRate_Min = property(_MTIDevice.MTIDeviceParamLimits_SampleRate_Min_get, _MTIDevice.MTIDeviceParamLimits_SampleRate_Min_set, doc=r"""SampleRate_Min""")
    SampleRate_Max = property(_MTIDevice.MTIDeviceParamLimits_SampleRate_Max_get, _MTIDevice.MTIDeviceParamLimits_SampleRate_Max_set, doc=r"""SampleRate_Max""")
    SamplesPerFrame_Min = property(_MTIDevice.MTIDeviceParamLimits_SamplesPerFrame_Min_get, _MTIDevice.MTIDeviceParamLimits_SamplesPerFrame_Min_set, doc=r"""SamplesPerFrame_Min""")
    SamplesPerFrame_Max = property(_MTIDevice.MTIDeviceParamLimits_SamplesPerFrame_Max_get, _MTIDevice.MTIDeviceParamLimits_SamplesPerFrame_Max_set, doc=r"""SamplesPerFrame_Max""")
    HardwareFilterBw_Min = property(_MTIDevice.MTIDeviceParamLimits_HardwareFilterBw_Min_get, _MTIDevice.MTIDeviceParamLimits_HardwareFilterBw_Min_set, doc=r"""HardwareFilterBw_Min""")
    HardwareFilterBw_Max = property(_MTIDevice.MTIDeviceParamLimits_HardwareFilterBw_Max_get, _MTIDevice.MTIDeviceParamLimits_HardwareFilterBw_Max_set, doc=r"""HardwareFilterBw_Max""")
    FramesPerSecond_Min = property(_MTIDevice.MTIDeviceParamLimits_FramesPerSecond_Min_get, _MTIDevice.MTIDeviceParamLimits_FramesPerSecond_Min_set, doc=r"""FramesPerSecond_Min""")
    FramesPerSecond_Max = property(_MTIDevice.MTIDeviceParamLimits_FramesPerSecond_Max_get, _MTIDevice.MTIDeviceParamLimits_FramesPerSecond_Max_set, doc=r"""FramesPerSecond_Max""")
    VdifferenceMax_Min = property(_MTIDevice.MTIDeviceParamLimits_VdifferenceMax_Min_get, _MTIDevice.MTIDeviceParamLimits_VdifferenceMax_Min_set, doc=r"""VdifferenceMax_Min""")
    VdifferenceMax_Max = property(_MTIDevice.MTIDeviceParamLimits_VdifferenceMax_Max_get, _MTIDevice.MTIDeviceParamLimits_VdifferenceMax_Max_set, doc=r"""VdifferenceMax_Max""")
    Vbias_Min = property(_MTIDevice.MTIDeviceParamLimits_Vbias_Min_get, _MTIDevice.MTIDeviceParamLimits_Vbias_Min_set, doc=r"""Vbias_Min""")
    Vbias_Max = property(_MTIDevice.MTIDeviceParamLimits_Vbias_Max_get, _MTIDevice.MTIDeviceParamLimits_Vbias_Max_set, doc=r"""Vbias_Max""")

    def __init__(self):
        r"""__init__(self) -> MTIDeviceParamLimits"""
        _MTIDevice.MTIDeviceParamLimits_swiginit(self, _MTIDevice.new_MTIDeviceParamLimits())
    __swig_destroy__ = _MTIDevice.delete_MTIDeviceParamLimits

# Register MTIDeviceParamLimits in _MTIDevice:
_MTIDevice.MTIDeviceParamLimits_swigregister(MTIDeviceParamLimits)

class MTIAvailableDevices(object):
    r"""Proxy of C++ MTIAvailableDevices class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DeviceName = property(_MTIDevice.MTIAvailableDevices_DeviceName_get, _MTIDevice.MTIAvailableDevices_DeviceName_set, doc=r"""DeviceName""")
    FirmwareName = property(_MTIDevice.MTIAvailableDevices_FirmwareName_get, _MTIDevice.MTIAvailableDevices_FirmwareName_set, doc=r"""FirmwareName""")
    CommType = property(_MTIDevice.MTIAvailableDevices_CommType_get, _MTIDevice.MTIAvailableDevices_CommType_set, doc=r"""CommType""")
    USARTBaudRate = property(_MTIDevice.MTIAvailableDevices_USARTBaudRate_get, _MTIDevice.MTIAvailableDevices_USARTBaudRate_set, doc=r"""USARTBaudRate""")
    CommPortNumber = property(_MTIDevice.MTIAvailableDevices_CommPortNumber_get, _MTIDevice.MTIAvailableDevices_CommPortNumber_set, doc=r"""CommPortNumber""")
    CommPortName = property(_MTIDevice.MTIAvailableDevices_CommPortName_get, _MTIDevice.MTIAvailableDevices_CommPortName_set, doc=r"""CommPortName""")
    VmaxMEMSDriver = property(_MTIDevice.MTIAvailableDevices_VmaxMEMSDriver_get, _MTIDevice.MTIAvailableDevices_VmaxMEMSDriver_set, doc=r"""VmaxMEMSDriver""")
    NumDevices = property(_MTIDevice.MTIAvailableDevices_NumDevices_get, _MTIDevice.MTIAvailableDevices_NumDevices_set, doc=r"""NumDevices""")

    def __init__(self):
        r"""__init__(self) -> MTIAvailableDevices"""
        _MTIDevice.MTIAvailableDevices_swiginit(self, _MTIDevice.new_MTIAvailableDevices())
    __swig_destroy__ = _MTIDevice.delete_MTIAvailableDevices

# Register MTIAvailableDevices in _MTIDevice:
_MTIDevice.MTIAvailableDevices_swigregister(MTIAvailableDevices)

class MTITrackParams(object):
    r"""Proxy of C++ MTITrackParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Success = property(_MTIDevice.MTITrackParams_Success_get, _MTIDevice.MTITrackParams_Success_set, doc=r"""Success""")
    Threshold = property(_MTIDevice.MTITrackParams_Threshold_get, _MTIDevice.MTITrackParams_Threshold_set, doc=r"""Threshold""")
    NormalGain = property(_MTIDevice.MTITrackParams_NormalGain_get, _MTIDevice.MTITrackParams_NormalGain_set, doc=r"""NormalGain""")
    TangentialGain = property(_MTIDevice.MTITrackParams_TangentialGain_get, _MTIDevice.MTITrackParams_TangentialGain_set, doc=r"""TangentialGain""")
    BufferDelay = property(_MTIDevice.MTITrackParams_BufferDelay_get, _MTIDevice.MTITrackParams_BufferDelay_set, doc=r"""BufferDelay""")
    HitRatio = property(_MTIDevice.MTITrackParams_HitRatio_get, _MTIDevice.MTITrackParams_HitRatio_set, doc=r"""HitRatio""")
    EnableSearch = property(_MTIDevice.MTITrackParams_EnableSearch_get, _MTIDevice.MTITrackParams_EnableSearch_set, doc=r"""EnableSearch""")
    EnableOffsetStreaming = property(_MTIDevice.MTITrackParams_EnableOffsetStreaming_get, _MTIDevice.MTITrackParams_EnableOffsetStreaming_set, doc=r"""EnableOffsetStreaming""")
    EnableTrack = property(_MTIDevice.MTITrackParams_EnableTrack_get, _MTIDevice.MTITrackParams_EnableTrack_set, doc=r"""EnableTrack""")

    def __init__(self):
        r"""__init__(self) -> MTITrackParams"""
        _MTIDevice.MTITrackParams_swiginit(self, _MTIDevice.new_MTITrackParams())
    __swig_destroy__ = _MTIDevice.delete_MTITrackParams

# Register MTITrackParams in _MTIDevice:
_MTIDevice.MTITrackParams_swigregister(MTITrackParams)

class MTIRGBDriverParams(object):
    r"""Proxy of C++ MTIRGBDriverParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Success = property(_MTIDevice.MTIRGBDriverParams_Success_get, _MTIDevice.MTIRGBDriverParams_Success_set, doc=r"""Success""")
    RedOffset = property(_MTIDevice.MTIRGBDriverParams_RedOffset_get, _MTIDevice.MTIRGBDriverParams_RedOffset_set, doc=r"""RedOffset""")
    RedGain = property(_MTIDevice.MTIRGBDriverParams_RedGain_get, _MTIDevice.MTIRGBDriverParams_RedGain_set, doc=r"""RedGain""")
    GreenOffset = property(_MTIDevice.MTIRGBDriverParams_GreenOffset_get, _MTIDevice.MTIRGBDriverParams_GreenOffset_set, doc=r"""GreenOffset""")
    GreenGain = property(_MTIDevice.MTIRGBDriverParams_GreenGain_get, _MTIDevice.MTIRGBDriverParams_GreenGain_set, doc=r"""GreenGain""")
    BlueOffset = property(_MTIDevice.MTIRGBDriverParams_BlueOffset_get, _MTIDevice.MTIRGBDriverParams_BlueOffset_set, doc=r"""BlueOffset""")
    BlueGain = property(_MTIDevice.MTIRGBDriverParams_BlueGain_get, _MTIDevice.MTIRGBDriverParams_BlueGain_set, doc=r"""BlueGain""")

    def __init__(self):
        r"""__init__(self) -> MTIRGBDriverParams"""
        _MTIDevice.MTIRGBDriverParams_swiginit(self, _MTIDevice.new_MTIRGBDriverParams())
    __swig_destroy__ = _MTIDevice.delete_MTIRGBDriverParams

# Register MTIRGBDriverParams in _MTIDevice:
_MTIDevice.MTIRGBDriverParams_swigregister(MTIRGBDriverParams)

class MTITrackStatus(object):
    r"""Proxy of C++ MTITrackStatus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Success = property(_MTIDevice.MTITrackStatus_Success_get, _MTIDevice.MTITrackStatus_Success_set, doc=r"""Success""")
    TrackLocked = property(_MTIDevice.MTITrackStatus_TrackLocked_get, _MTIDevice.MTITrackStatus_TrackLocked_set, doc=r"""TrackLocked""")
    XOffset = property(_MTIDevice.MTITrackStatus_XOffset_get, _MTIDevice.MTITrackStatus_XOffset_set, doc=r"""XOffset""")
    YOffset = property(_MTIDevice.MTITrackStatus_YOffset_get, _MTIDevice.MTITrackStatus_YOffset_set, doc=r"""YOffset""")
    HitCount = property(_MTIDevice.MTITrackStatus_HitCount_get, _MTIDevice.MTITrackStatus_HitCount_set, doc=r"""HitCount""")

    def __init__(self):
        r"""__init__(self) -> MTITrackStatus"""
        _MTIDevice.MTITrackStatus_swiginit(self, _MTIDevice.new_MTITrackStatus())
    __swig_destroy__ = _MTIDevice.delete_MTITrackStatus

# Register MTITrackStatus in _MTIDevice:
_MTIDevice.MTITrackStatus_swigregister(MTITrackStatus)

class MTIDevice(object):
    r"""Proxy of C++ MTIDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> MTIDevice"""
        _MTIDevice.MTIDevice_swiginit(self, _MTIDevice.new_MTIDevice())
    __swig_destroy__ = _MTIDevice.delete_MTIDevice

    def DeleteDevice(self):
        r"""DeleteDevice(self)"""
        return _MTIDevice.MTIDevice_DeleteDevice(self)

    def ConnectDevice(self, *args):
        r"""
        ConnectDevice(self, portName)

        Parameters
        ----------
        portName: char *

        ConnectDevice(self, socket)

        Parameters
        ----------
        socket: MTISerialIO *

        ConnectDevice(self)
        """
        return _MTIDevice.MTIDevice_ConnectDevice(self, *args)

    def DisconnectDevice(self):
        r"""DisconnectDevice(self)"""
        return _MTIDevice.MTIDevice_DisconnectDevice(self)

    def GetAvailableDevices(self):
        r"""GetAvailableDevices(self) -> MTIAvailableDevices"""
        return _MTIDevice.MTIDevice_GetAvailableDevices(self)

    def ListAvailableDevices(self, table):
        r"""
        ListAvailableDevices(self, table)

        Parameters
        ----------
        table: MTIAvailableDevices *

        """
        return _MTIDevice.MTIDevice_ListAvailableDevices(self, table)

    def StopDataStream(self):
        r"""StopDataStream(self)"""
        return _MTIDevice.MTIDevice_StopDataStream(self)

    def StartDataStream(self, repeatCount=-1, confirmOnComplete=True):
        r"""
        StartDataStream(self, repeatCount=-1, confirmOnComplete=True)

        Parameters
        ----------
        repeatCount: int
        confirmOnComplete: bool

        """
        return _MTIDevice.MTIDevice_StartDataStream(self, repeatCount, confirmOnComplete)

    def ResetDevicePosition(self):
        r"""ResetDevicePosition(self)"""
        return _MTIDevice.MTIDevice_ResetDevicePosition(self)

    def GoToDevicePosition(self, x, y, m, mSec=5):
        r"""
        GoToDevicePosition(self, x, y, m, mSec=5)

        Parameters
        ----------
        x: float
        y: float
        m: unsigned char
        mSec: unsigned int

        """
        return _MTIDevice.MTIDevice_GoToDevicePosition(self, x, y, m, mSec)

    def SetRGBData(self, *args):
        r"""
        SetRGBData(self, rgbData, numSamples)

        Parameters
        ----------
        rgbData: unsigned int *
        numSamples: unsigned int

        SetRGBData(self, rgbColor, numSamples=0)

        Parameters
        ----------
        rgbColor: unsigned int
        numSamples: unsigned int

        """
        return _MTIDevice.MTIDevice_SetRGBData(self, *args)

    def SetRGBDriverParameters(self, redOffset, redGain, greenOffset, greenGain, blueOffset, blueGain):
        r"""
        SetRGBDriverParameters(self, redOffset, redGain, greenOffset, greenGain, blueOffset, blueGain)

        Parameters
        ----------
        redOffset: unsigned char
        redGain: unsigned char
        greenOffset: unsigned char
        greenGain: unsigned char
        blueOffset: unsigned char
        blueGain: unsigned char

        """
        return _MTIDevice.MTIDevice_SetRGBDriverParameters(self, redOffset, redGain, greenOffset, greenGain, blueOffset, blueGain)

    def GetRGBDriverParameters(self):
        r"""GetRGBDriverParameters(self) -> MTIRGBDriverParams"""
        return _MTIDevice.MTIDevice_GetRGBDriverParameters(self)

    def SetRGBGammas(self, gamma_R, gamma_G, gamma_B):
        r"""
        SetRGBGammas(self, gamma_R, gamma_G, gamma_B)

        Parameters
        ----------
        gamma_R: float
        gamma_G: float
        gamma_B: float

        """
        return _MTIDevice.MTIDevice_SetRGBGammas(self, gamma_R, gamma_G, gamma_B)

    def GetRGBData(self, rgbData, numSamples):
        r"""
        GetRGBData(self, rgbData, numSamples)

        Parameters
        ----------
        rgbData: unsigned int *
        numSamples: unsigned int

        """
        return _MTIDevice.MTIDevice_GetRGBData(self, rgbData, numSamples)

    def SaveToFlash(self, flashsave):
        r"""
        SaveToFlash(self, flashsave)

        Parameters
        ----------
        flashsave: enum MTIFlash

        """
        return _MTIDevice.MTIDevice_SaveToFlash(self, flashsave)

    def ClearInputBuffer(self):
        r"""ClearInputBuffer(self)"""
        return _MTIDevice.MTIDevice_ClearInputBuffer(self)

    def SendSerialReset(self):
        r"""SendSerialReset(self)"""
        return _MTIDevice.MTIDevice_SendSerialReset(self)

    def ResetDevice(self):
        r"""ResetDevice(self)"""
        return _MTIDevice.MTIDevice_ResetDevice(self)

    def GetXStop(self):
        r"""GetXStop(self) -> float"""
        return _MTIDevice.MTIDevice_GetXStop(self)

    def GetYStop(self):
        r"""GetYStop(self) -> float"""
        return _MTIDevice.MTIDevice_GetYStop(self)

    def GetMStop(self):
        r"""GetMStop(self) -> unsigned char"""
        return _MTIDevice.MTIDevice_GetMStop(self)

    def GetIStop(self):
        r"""GetIStop(self) -> unsigned int"""
        return _MTIDevice.MTIDevice_GetIStop(self)

    def IsDeviceConnected(self):
        r"""IsDeviceConnected(self) -> bool"""
        return _MTIDevice.MTIDevice_IsDeviceConnected(self)

    def IsDeviceResponding(self):
        r"""IsDeviceResponding(self) -> bool"""
        return _MTIDevice.MTIDevice_IsDeviceResponding(self)

    def IsDeviceRunning(self):
        r"""IsDeviceRunning(self) -> bool"""
        return _MTIDevice.MTIDevice_IsDeviceRunning(self)

    def IsTrackingSupported(self):
        r"""IsTrackingSupported(self) -> bool"""
        return _MTIDevice.MTIDevice_IsTrackingSupported(self)

    def GetLastError(self):
        r"""GetLastError(self) -> MTIError"""
        return _MTIDevice.MTIDevice_GetLastError(self)

    def SetDefaultDeviceName(self, text, _pass):
        r"""
        SetDefaultDeviceName(self, text, _pass)

        Parameters
        ----------
        text: char *
        pass: std::string const &

        """
        return _MTIDevice.MTIDevice_SetDefaultDeviceName(self, text, _pass)

    def GetDeviceParams(self):
        r"""GetDeviceParams(self) -> MTIDeviceParams"""
        return _MTIDevice.MTIDevice_GetDeviceParams(self)

    def SetDeviceParams(self, params):
        r"""
        SetDeviceParams(self, params)

        Parameters
        ----------
        params: MTIDeviceParams *

        """
        return _MTIDevice.MTIDevice_SetDeviceParams(self, params)

    def GetDeviceParam(self, param, paramID=0):
        r"""
        GetDeviceParam(self, param, paramID=0) -> float

        Parameters
        ----------
        param: enum MTIParam
        paramID: int

        """
        return _MTIDevice.MTIDevice_GetDeviceParam(self, param, paramID)

    def SetDeviceParam(self, param, paramValue1, paramValue2=0.):
        r"""
        SetDeviceParam(self, param, paramValue1, paramValue2=0.)

        Parameters
        ----------
        param: enum MTIParam
        paramValue1: float
        paramValue2: float

        """
        return _MTIDevice.MTIDevice_SetDeviceParam(self, param, paramValue1, paramValue2)

    def LoadDeviceParams(self, fileName):
        r"""
        LoadDeviceParams(self, fileName) -> MTIDeviceParams

        Parameters
        ----------
        fileName: char const *

        """
        return _MTIDevice.MTIDevice_LoadDeviceParams(self, fileName)

    def SaveDeviceParams(self, fileName):
        r"""
        SaveDeviceParams(self, fileName)

        Parameters
        ----------
        fileName: char *

        """
        return _MTIDevice.MTIDevice_SaveDeviceParams(self, fileName)

    def GetEnumString(self, enumName, enumValue):
        r"""
        GetEnumString(self, enumName, enumValue) -> char *

        Parameters
        ----------
        enumName: char const *
        enumValue: int

        """
        return _MTIDevice.MTIDevice_GetEnumString(self, enumName, enumValue)

    def GetTrackParams(self):
        r"""GetTrackParams(self) -> MTITrackParams"""
        return _MTIDevice.MTIDevice_GetTrackParams(self)

    def SetTrackParams(self, params):
        r"""
        SetTrackParams(self, params)

        Parameters
        ----------
        params: MTITrackParams *

        """
        return _MTIDevice.MTIDevice_SetTrackParams(self, params)

    def GetTrackIntegrals(self):
        r"""GetTrackIntegrals(self)"""
        return _MTIDevice.MTIDevice_GetTrackIntegrals(self)

    def GetTrackStatus(self):
        r"""GetTrackStatus(self) -> MTITrackStatus"""
        return _MTIDevice.MTIDevice_GetTrackStatus(self)

    def GetAnalogInputValue(self, ChannelNumber):
        r"""
        GetAnalogInputValue(self, ChannelNumber) -> float

        Parameters
        ----------
        ChannelNumber: unsigned int

        """
        return _MTIDevice.MTIDevice_GetAnalogInputValue(self, ChannelNumber)

    def GetPhotoDetectorValue(self):
        r"""GetPhotoDetectorValue(self) -> float"""
        return _MTIDevice.MTIDevice_GetPhotoDetectorValue(self)

    def GetSamplesRemaining(self):
        r"""GetSamplesRemaining(self) -> unsigned int"""
        return _MTIDevice.MTIDevice_GetSamplesRemaining(self)

    def SendDataStream(self, x, y, m, numSamples, delaySamples=0, minimizeJump=True):
        r"""SendDataStream(MTIDevice self, NumPy float32 array x, NumPy float32 array y, NumPy uint8 array m, unsigned int delaySamples=0, bool minimizeJump=True)SendDataStream(MTIDevice self, NumPy float32 array x, NumPy float32 array y, NumPy uint8 array m, unsigned int delaySamples=0, bool minimizeJump=True)SendDataStream(MTIDevice self, NumPy float32 array x, NumPy float32 array y, NumPy uint8 array m, unsigned int delaySamples=0, bool minimizeJump=True)"""
        return _MTIDevice.MTIDevice_SendDataStream(self, x, y, m, numSamples, delaySamples, minimizeJump)

    def GetAnalogInputStream(self, AI0, AI1):
        r"""
        GetAnalogInputStream(self, AI0, AI1) -> unsigned int

        Parameters
        ----------
        AI0: float *
        AI1: float *

        """
        return _MTIDevice.MTIDevice_GetAnalogInputStream(self, AI0, AI1)

    def GetAnalogInputBuffer(self, AI0, AI1):
        r"""
        GetAnalogInputBuffer(self, AI0, AI1)

        Parameters
        ----------
        AI0: float *
        AI1: float *

        """
        return _MTIDevice.MTIDevice_GetAnalogInputBuffer(self, AI0, AI1)

# Register MTIDevice in _MTIDevice:
_MTIDevice.MTIDevice_swigregister(MTIDevice)

MTI_MAX_NUM_FRAMES = _MTIDevice.MTI_MAX_NUM_FRAMES

DATAFORMAT = _MTIDevice.DATAFORMAT

MTI_MAX_NUM_SAMPLES = _MTIDevice.MTI_MAX_NUM_SAMPLES

class MTIDataGenerator(object):
    r"""Proxy of C++ MTIDataGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> MTIDataGenerator"""
        _MTIDevice.MTIDataGenerator_swiginit(self, _MTIDevice.new_MTIDataGenerator())
    __swig_destroy__ = _MTIDevice.delete_MTIDataGenerator

    def BoundingBox(self, xData, yData, numPoints, xMin, xMax, yMin, yMax):
        r"""
        BoundingBox(self, xData, yData, numPoints, xMin, xMax, yMin, yMax)

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        xMin: float &
        xMax: float &
        yMin: float &
        yMax: float &

        """
        return _MTIDevice.MTIDataGenerator_BoundingBox(self, xData, yData, numPoints, xMin, xMax, yMin, yMax)

    def NormalizeData(self, xData, yData, numPoints, amplitude, theta, xMin, xMax, yMin, yMax):
        r"""
        NormalizeData(self, xData, yData, numPoints, amplitude, theta, xMin, xMax, yMin, yMax) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        amplitude: float
        theta: float
        xMin: float &
        xMax: float &
        yMin: float &
        yMax: float &

        """
        return _MTIDevice.MTIDataGenerator_NormalizeData(self, xData, yData, numPoints, amplitude, theta, xMin, xMax, yMin, yMax)

    def AffineTransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof):
        r"""
        AffineTransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        amplitude: float
        theta: float
        xof: float
        yof: float

        """
        return _MTIDevice.MTIDataGenerator_AffineTransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof)

    def InitProjectiveTransformMatrix(self, x, y, inverse):
        r"""
        InitProjectiveTransformMatrix(self, x, y, inverse)

        Parameters
        ----------
        x: float *
        y: float *
        inverse: bool

        """
        return _MTIDevice.MTIDataGenerator_InitProjectiveTransformMatrix(self, x, y, inverse)

    def ProjectiveTransformData(self, xData, yData, numPoints):
        r"""
        ProjectiveTransformData(self, xData, yData, numPoints) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_ProjectiveTransformData(self, xData, yData, numPoints)

    def TangentialTransformData(self, xData, yData, numPoints, thetaMax):
        r"""
        TangentialTransformData(self, xData, yData, numPoints, thetaMax) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        thetaMax: float

        """
        return _MTIDevice.MTIDataGenerator_TangentialTransformData(self, xData, yData, numPoints, thetaMax)

    def InitRadialTransformMult(self, inverse):
        r"""
        InitRadialTransformMult(self, inverse)

        Parameters
        ----------
        inverse: bool

        """
        return _MTIDevice.MTIDataGenerator_InitRadialTransformMult(self, inverse)

    def RadialTransformData(self, xData, yData, numPoints, k):
        r"""
        RadialTransformData(self, xData, yData, numPoints, k) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        k: float

        """
        return _MTIDevice.MTIDataGenerator_RadialTransformData(self, xData, yData, numPoints, k)

    def TransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        TransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        numPoints: unsigned int
        amplitude: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_TransformData(self, xData, yData, numPoints, amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def gcd(self, a, b):
        r"""
        gcd(self, a, b) -> int

        Parameters
        ----------
        a: int
        b: int

        """
        return _MTIDevice.MTIDataGenerator_gcd(self, a, b)

    def saw(self, theta):
        r"""
        saw(self, theta) -> float

        Parameters
        ----------
        theta: float

        """
        return _MTIDevice.MTIDataGenerator_saw(self, theta)

    def AnimationRotate(self, *args):
        r"""
        AnimationRotate(self, xData, yData, mData, numPoints, numFrames) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        numFrames: unsigned int

        AnimationRotate(self, xData, yData, mData, rgbData, numPoints, numFrames) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        rgbData: unsigned int *
        numPoints: unsigned int
        numFrames: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_AnimationRotate(self, *args)

    def AnimationScroll(self, *args):
        r"""
        AnimationScroll(self, xData, yData, mData, numPoints, numFrames) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        numFrames: unsigned int

        AnimationScroll(self, xData, yData, mData, rgbData, numPoints, numFrames) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        rgbData: unsigned int *
        numPoints: unsigned int
        numFrames: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_AnimationScroll(self, *args)

    def AnimationBounce(self, *args):
        r"""
        AnimationBounce(self, xData, yData, mData, numPoints, numFrames, theta) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        numFrames: unsigned int
        theta: float

        AnimationBounce(self, xData, yData, mData, rgbData, numPoints, numFrames, theta) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        rgbData: unsigned int *
        numPoints: unsigned int
        numFrames: unsigned int
        theta: float

        """
        return _MTIDevice.MTIDataGenerator_AnimationBounce(self, *args)

    def SineWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, phase):
        r"""
        SineWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, phase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        amplitude: float
        frequency: unsigned int
        phase: float

        """
        return _MTIDevice.MTIDataGenerator_SineWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, phase)

    def SawtoothWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase):
        r"""
        SawtoothWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        amplitude: float
        frequency: unsigned int
        width: float
        phase: float

        """
        return _MTIDevice.MTIDataGenerator_SawtoothWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase)

    def SquareWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase):
        r"""
        SquareWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        amplitude: float
        frequency: unsigned int
        width: float
        phase: float

        """
        return _MTIDevice.MTIDataGenerator_SquareWaveform(self, xData, yData, mData, numPoints, amplitude, frequency, width, phase)

    def NoiseWaveform(self, xData, numPoints, amplitude):
        r"""
        NoiseWaveform(self, xData, numPoints, amplitude) -> unsigned int

        Parameters
        ----------
        xData: float *
        numPoints: unsigned int
        amplitude: float

        """
        return _MTIDevice.MTIDataGenerator_NoiseWaveform(self, xData, numPoints, amplitude)

    def RQWaveform(self, xData, yData, mData, sps, sawtoothOnY, xAmplitude, yAmplitude, xFrequency, numPeriods, dutyCycle, yBandwidth):
        r"""
        RQWaveform(self, xData, yData, mData, sps, sawtoothOnY, xAmplitude, yAmplitude, xFrequency, numPeriods, dutyCycle, yBandwidth) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        sps: unsigned int &
        sawtoothOnY: bool
        xAmplitude: float
        yAmplitude: float
        xFrequency: unsigned int
        numPeriods: float
        dutyCycle: float
        yBandwidth: float

        """
        return _MTIDevice.MTIDataGenerator_RQWaveform(self, xData, yData, mData, sps, sawtoothOnY, xAmplitude, yAmplitude, xFrequency, numPeriods, dutyCycle, yBandwidth)

    def SpiralCurve(self, xData, yData, mData, numPoints, xAmplitude, yAmplitude, frequency, phase):
        r"""
        SpiralCurve(self, xData, yData, mData, numPoints, xAmplitude, yAmplitude, frequency, phase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        xAmplitude: float
        yAmplitude: float
        frequency: unsigned int
        phase: float

        """
        return _MTIDevice.MTIDataGenerator_SpiralCurve(self, xData, yData, mData, numPoints, xAmplitude, yAmplitude, frequency, phase)

    def PolygonCurve(self, xData, yData, mData, numPoints, amplitude, frequency, phase):
        r"""
        PolygonCurve(self, xData, yData, mData, numPoints, amplitude, frequency, phase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        amplitude: float
        frequency: unsigned int
        phase: float

        """
        return _MTIDevice.MTIDataGenerator_PolygonCurve(self, xData, yData, mData, numPoints, amplitude, frequency, phase)

    def SpirographCurve(self, xData, yData, mData, numPoints, curveType, waveType, amplitude, p1, p2, p3):
        r"""
        SpirographCurve(self, xData, yData, mData, numPoints, curveType, waveType, amplitude, p1, p2, p3) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        curveType: unsigned int
        waveType: unsigned int
        amplitude: float
        p1: int
        p2: int
        p3: int

        """
        return _MTIDevice.MTIDataGenerator_SpirographCurve(self, xData, yData, mData, numPoints, curveType, waveType, amplitude, p1, p2, p3)

    def LissajousCurve(self, xData, yData, mData, numPoints, waveType, amplitude, xFreq, yFreq, phase, modType, modAmplitude, modFreq, modPhase):
        r"""
        LissajousCurve(self, xData, yData, mData, numPoints, waveType, amplitude, xFreq, yFreq, phase, modType, modAmplitude, modFreq, modPhase) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        waveType: unsigned int
        amplitude: float
        xFreq: unsigned int
        yFreq: unsigned int
        phase: float
        modType: unsigned int
        modAmplitude: float
        modFreq: unsigned int
        modPhase: float

        """
        return _MTIDevice.MTIDataGenerator_LissajousCurve(self, xData, yData, mData, numPoints, waveType, amplitude, xFreq, yFreq, phase, modType, modAmplitude, modFreq, modPhase)

    def AnalogClockCurve(self, xData, yData, mData, hrs, min, sec, amplitude):
        r"""
        AnalogClockCurve(self, xData, yData, mData, hrs, min, sec, amplitude) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        hrs: unsigned int
        min: unsigned int
        sec: unsigned int
        amplitude: float

        """
        return _MTIDevice.MTIDataGenerator_AnalogClockCurve(self, xData, yData, mData, hrs, min, sec, amplitude)

    def DigitalClockCurve(self, xData, yData, mData, hrs, min, sec, fontIndex, amplitude, theta, retrace):
        r"""
        DigitalClockCurve(self, xData, yData, mData, hrs, min, sec, fontIndex, amplitude, theta, retrace) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        hrs: unsigned int
        min: unsigned int
        sec: unsigned int
        fontIndex: unsigned int
        amplitude: float
        theta: float
        retrace: bool

        """
        return _MTIDevice.MTIDataGenerator_DigitalClockCurve(self, xData, yData, mData, hrs, min, sec, fontIndex, amplitude, theta, retrace)

    def DynamicsCurve(self, xData, yData, mData, numPoints, x0, y0, xVel, yVel, xAcc, yAcc, fRatio):
        r"""
        DynamicsCurve(self, xData, yData, mData, numPoints, x0, y0, xVel, yVel, xAcc, yAcc, fRatio) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        numPoints: unsigned int
        x0: float
        y0: float
        xVel: float
        yVel: float
        xAcc: float
        yAcc: float
        fRatio: float

        """
        return _MTIDevice.MTIDataGenerator_DynamicsCurve(self, xData, yData, mData, numPoints, x0, y0, xVel, yVel, xAcc, yAcc, fRatio)

    def ClearIldaData(self):
        r"""ClearIldaData(self)"""
        return _MTIDevice.MTIDataGenerator_ClearIldaData(self)

    def LoadIldaFile(self, filename):
        r"""
        LoadIldaFile(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _MTIDevice.MTIDataGenerator_LoadIldaFile(self, filename)

    def IldaFrameType(self):
        r"""IldaFrameType(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_IldaFrameType(self)

    def IldaNumFrames(self):
        r"""IldaNumFrames(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_IldaNumFrames(self)

    def IldaNumMaxPoints(self):
        r"""IldaNumMaxPoints(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_IldaNumMaxPoints(self)

    def IldaNumTotalPoints(self):
        r"""IldaNumTotalPoints(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_IldaNumTotalPoints(self)

    def IldaFrameSize(self, frameId):
        r"""
        IldaFrameSize(self, frameId) -> unsigned int

        Parameters
        ----------
        frameId: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_IldaFrameSize(self, frameId)

    def IldaAnimSize(self, frameIds, numFrames):
        r"""
        IldaAnimSize(self, frameIds, numFrames) -> unsigned int

        Parameters
        ----------
        frameIds: unsigned int *
        numFrames: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_IldaAnimSize(self, frameIds, numFrames)

    def IldaDataStream(self, *args):
        r"""
        IldaDataStream(self, xData, yData, mData, frameIds, numFrames, amplitude, theta, theta1, theta2, retrace) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        frameIds: unsigned int *
        numFrames: unsigned int
        amplitude: float
        theta: float
        theta1: float
        theta2: float
        retrace: bool

        IldaDataStream(self, xData, yData, mData, rgbData, frameIds, numFrames, amplitude, theta, theta1, theta2, retrace) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        rgbData: unsigned int *
        frameIds: unsigned int *
        numFrames: unsigned int
        amplitude: float
        theta: float
        theta1: float
        theta2: float
        retrace: bool

        """
        return _MTIDevice.MTIDataGenerator_IldaDataStream(self, *args)

    def ClearHersheyData(self):
        r"""ClearHersheyData(self)"""
        return _MTIDevice.MTIDataGenerator_ClearHersheyData(self)

    def LoadHersheyFile(self, filename):
        r"""
        LoadHersheyFile(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _MTIDevice.MTIDataGenerator_LoadHersheyFile(self, filename)

    def HersheyNumMath(self):
        r"""HersheyNumMath(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_HersheyNumMath(self)

    def HersheyNumSym(self):
        r"""HersheyNumSym(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_HersheyNumSym(self)

    def HersheyNumOR(self):
        r"""HersheyNumOR(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_HersheyNumOR(self)

    def HersheyNumOC(self):
        r"""HersheyNumOC(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_HersheyNumOC(self)

    def HersheyIndexMath(self, i):
        r"""
        HersheyIndexMath(self, i) -> unsigned int

        Parameters
        ----------
        i: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_HersheyIndexMath(self, i)

    def HersheyIndexSym(self, i):
        r"""
        HersheyIndexSym(self, i) -> unsigned int

        Parameters
        ----------
        i: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_HersheyIndexSym(self, i)

    def HersheyIndexFont(self, i, j):
        r"""
        HersheyIndexFont(self, i, j) -> unsigned int

        Parameters
        ----------
        i: unsigned int
        j: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_HersheyIndexFont(self, i, j)

    def HersheyDataSize(self, *args):
        r"""
        HersheyDataSize(self, frameIds, numFrames, ocMode) -> unsigned int

        Parameters
        ----------
        frameIds: unsigned int *
        numFrames: unsigned int
        ocMode: bool

        HersheyDataSize(self, text, numChars, fontIndex) -> unsigned int

        Parameters
        ----------
        text: char const *
        numChars: unsigned int
        fontIndex: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_HersheyDataSize(self, *args)

    def HersheyDataStream(self, *args):
        r"""
        HersheyDataStream(self, xData, yData, mData, charIds, numChars, ocMode, amplitude, theta, retrace) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        charIds: unsigned int *
        numChars: unsigned int
        ocMode: bool
        amplitude: float
        theta: float
        retrace: bool

        HersheyDataStream(self, xData, yData, mData, text, numChars, fontIndex, amplitude, theta, retrace) -> unsigned int

        Parameters
        ----------
        xData: float *
        yData: float *
        mData: unsigned char *
        text: char const *
        numChars: unsigned int
        fontIndex: unsigned int
        amplitude: float
        theta: float
        retrace: bool

        """
        return _MTIDevice.MTIDataGenerator_HersheyDataStream(self, *args)

    def ClearPointFileData(self):
        r"""ClearPointFileData(self)"""
        return _MTIDevice.MTIDataGenerator_ClearPointFileData(self)

    def AllocPointFileData(self, numPoints):
        r"""
        AllocPointFileData(self, numPoints)

        Parameters
        ----------
        numPoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_AllocPointFileData(self, numPoints)

    def LoadPointFile(self, filename):
        r"""
        LoadPointFile(self, filename) -> unsigned int

        Parameters
        ----------
        filename: char const *

        """
        return _MTIDevice.MTIDataGenerator_LoadPointFile(self, filename)

    def GetPointFileSize(self):
        r"""GetPointFileSize(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetPointFileSize(self)

    def GetPointFileSps(self):
        r"""GetPointFileSps(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetPointFileSps(self)

    @staticmethod
    def ReadFileParameter(filename, paramName, paramValue=0.):
        r"""
        ReadFileParameter(filename, paramName, paramValue=0.) -> float

        Parameters
        ----------
        filename: char const *
        paramName: char const *
        paramValue: float

        """
        return _MTIDevice.MTIDataGenerator_ReadFileParameter(filename, paramName, paramValue)

    def ClearPointTimeFileData(self):
        r"""ClearPointTimeFileData(self)"""
        return _MTIDevice.MTIDataGenerator_ClearPointTimeFileData(self)

    def AllocPointTimeFileData(self, numPoints):
        r"""
        AllocPointTimeFileData(self, numPoints)

        Parameters
        ----------
        numPoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_AllocPointTimeFileData(self, numPoints)

    def LoadPointTimeFile(self, filename):
        r"""
        LoadPointTimeFile(self, filename) -> unsigned int

        Parameters
        ----------
        filename: char const *

        """
        return _MTIDevice.MTIDataGenerator_LoadPointTimeFile(self, filename)

    def GetPointTimeFileSize(self):
        r"""GetPointTimeFileSize(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetPointTimeFileSize(self)

    def GetPointTimeFileSps(self):
        r"""GetPointTimeFileSps(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetPointTimeFileSps(self)

    def ClearInterpData(self):
        r"""ClearInterpData(self)"""
        return _MTIDevice.MTIDataGenerator_ClearInterpData(self)

    def AllocInterpData(self, numKeyPoints, numSamplePoints):
        r"""
        AllocInterpData(self, numKeyPoints, numSamplePoints)

        Parameters
        ----------
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_AllocInterpData(self, numKeyPoints, numSamplePoints)

    def InterpolateDataLinear(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio=2.5):
        r"""
        InterpolateDataLinear(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio=2.5) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int
        ooRatio: float

        """
        return _MTIDevice.MTIDataGenerator_InterpolateDataLinear(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio)

    def InterpolateDataTrapezoidal(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio=2.5, onFrac=0.1, offFrac=0.5):
        r"""
        InterpolateDataTrapezoidal(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio=2.5, onFrac=0.1, offFrac=0.5) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int
        ooRatio: float
        onFrac: float
        offFrac: float

        """
        return _MTIDevice.MTIDataGenerator_InterpolateDataTrapezoidal(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio, onFrac, offFrac)

    def InterpolateDataOptimized(self, *args):
        r"""
        InterpolateDataOptimized(self, xKey, yKey, mKey, rgbKey, xSample, ySample, mSample, rgbSample, numKeyPoints, numSamplePoints) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        rgbKey: unsigned int *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        rgbSample: unsigned int *
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int

        InterpolateDataOptimized(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_InterpolateDataOptimized(self, *args)

    def OptimizeKeypoints(self, *args):
        r"""
        OptimizeKeypoints(self, xKey, yKey, mKey, numKeyPoints, targetNumKeyPoints=0) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        numKeyPoints: unsigned int
        targetNumKeyPoints: unsigned int

        OptimizeKeypoints(self, xKey, yKey, mKey, rgbKey, numKeyPoints, targetNumKeyPoints=0) -> unsigned int

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        rgbKey: unsigned int *
        numKeyPoints: unsigned int
        targetNumKeyPoints: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_OptimizeKeypoints(self, *args)

    def LoadIIRFilterParams(self, filename):
        r"""
        LoadIIRFilterParams(self, filename)

        Parameters
        ----------
        filename: char const *

        """
        return _MTIDevice.MTIDataGenerator_LoadIIRFilterParams(self, filename)

    def GetIIRFilterOrder(self):
        r"""GetIIRFilterOrder(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetIIRFilterOrder(self)

    def GetIIRFilterSps(self):
        r"""GetIIRFilterSps(self) -> unsigned int"""
        return _MTIDevice.MTIDataGenerator_GetIIRFilterSps(self)

    def SetupSoftwareFilter(self, type, order, cutoffFreq, sampleFreq, twoChannel=True):
        r"""
        SetupSoftwareFilter(self, type, order, cutoffFreq, sampleFreq, twoChannel=True)

        Parameters
        ----------
        type: unsigned int
        order: unsigned int
        cutoffFreq: float
        sampleFreq: float
        twoChannel: bool

        """
        return _MTIDevice.MTIDataGenerator_SetupSoftwareFilter(self, type, order, cutoffFreq, sampleFreq, twoChannel)

    def LaserWriterInterpData(self, inCount, outCount, inM, inX, inY, outM, outX, outY, DON, DOFF, closed_trajectory):
        r"""
        LaserWriterInterpData(self, inCount, outCount, inM, inX, inY, outM, outX, outY, DON, DOFF, closed_trajectory)

        Parameters
        ----------
        inCount: int
        outCount: int
        inM: unsigned char *
        inX: float *
        inY: float *
        outM: unsigned char *
        outX: float *
        outY: float *
        DON: float
        DOFF: float
        closed_trajectory: int

        """
        return _MTIDevice.MTIDataGenerator_LaserWriterInterpData(self, inCount, outCount, inM, inX, inY, outM, outX, outY, DON, DOFF, closed_trajectory)

    def LaserWriterInterpData1Seg(self, inCount, outCount, inX, outX, DON):
        r"""
        LaserWriterInterpData1Seg(self, inCount, outCount, inX, outX, DON)

        Parameters
        ----------
        inCount: int
        outCount: int
        inX: float *
        outX: float *
        DON: float

        """
        return _MTIDevice.MTIDataGenerator_LaserWriterInterpData1Seg(self, inCount, outCount, inX, outX, DON)

    def CurvesDataSize(self, curveType, sps, rr, animType, atime, retrace, fileType, m1, m2, p2, p3, p4, txt, numChars):
        r"""
        CurvesDataSize(self, curveType, sps, rr, animType, atime, retrace, fileType, m1, m2, p2, p3, p4, txt, numChars) -> unsigned int

        Parameters
        ----------
        curveType: unsigned int
        sps: unsigned int
        rr: float
        animType: unsigned int
        atime: float
        retrace: bool
        fileType: unsigned int
        m1: unsigned int
        m2: unsigned int
        p2: float
        p3: float
        p4: float
        txt: char const *
        numChars: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_CurvesDataSize(self, curveType, sps, rr, animType, atime, retrace, fileType, m1, m2, p2, p3, p4, txt, numChars)

    def GenerateAnimations(self, *args):
        r"""
        GenerateAnimations(self, xSample, ySample, mSample, animType, numSamplePoints, numAnimFrames) -> unsigned int

        Parameters
        ----------
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        animType: unsigned int
        numSamplePoints: unsigned int
        numAnimFrames: unsigned int

        GenerateAnimations(self, xSample, ySample, mSample, rgbSample, animType, numSamplePoints, numAnimFrames) -> unsigned int

        Parameters
        ----------
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        rgbSample: unsigned int *
        animType: unsigned int
        numSamplePoints: unsigned int
        numAnimFrames: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_GenerateAnimations(self, *args)

    def GenerateWaveformData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateWaveformData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        m1: unsigned int
        p1: float
        p2: float
        p3: float
        p4: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateWaveformData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateSpirographData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateSpirographData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        m1: unsigned int
        m2: unsigned int
        p1: float
        p2: float
        p3: float
        p4: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateSpirographData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateLissajousData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, p5, p6, p7, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateLissajousData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, p5, p6, p7, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        m1: unsigned int
        m2: unsigned int
        p1: float
        p2: float
        p3: float
        p4: float
        p5: float
        p6: float
        p7: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateLissajousData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, p5, p6, p7, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateTextData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, TextMode, TextFont, Amplitude, CharID, txt, numChars, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateTextData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, TextMode, TextFont, Amplitude, CharID, txt, numChars, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        TextMode: unsigned int
        TextFont: unsigned int
        Amplitude: float
        CharID: float
        txt: char const *
        numChars: unsigned int
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateTextData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, TextMode, TextFont, Amplitude, CharID, txt, numChars, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateScanData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, e1, e2, bwc, pImage, spsMin, spsMax, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateScanData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, e1, e2, bwc, pImage, spsMin, spsMax, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int &
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        m1: unsigned int
        m2: unsigned int
        p1: float
        p2: float
        p3: float
        p4: float
        e1: float
        e2: float
        bwc: unsigned int
        pImage: void *
        spsMin: unsigned int
        spsMax: unsigned int
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateScanData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, m1, m2, p1, p2, p3, p4, e1, e2, bwc, pImage, spsMin, spsMax, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateClockData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, hrs, min, sec, ClockType, TextFont, Amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateClockData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, hrs, min, sec, ClockType, TextFont, Amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int
        rr: float
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        hrs: unsigned int
        min: unsigned int
        sec: unsigned int
        ClockType: unsigned int
        TextFont: unsigned int
        Amplitude: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateClockData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, rr, retrace, oor, onFrac, animType, atime, filtType, hrs, min, sec, ClockType, TextFont, Amplitude, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def GenerateSignalData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, sigType, m1, m2, p1, p2, p3, p4, p5, p6, p7, xof, yof):
        r"""
        GenerateSignalData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, sigType, m1, m2, p1, p2, p3, p4, p5, p6, p7, xof, yof)

        Parameters
        ----------
        xKey: float *
        yKey: float *
        mKey: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int &
        numSamplePoints: unsigned int &
        sps: unsigned int &
        sigType: unsigned int
        m1: unsigned int
        m2: unsigned int
        p1: float
        p2: float
        p3: float
        p4: float
        p5: float
        p6: float
        p7: float
        xof: float
        yof: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateSignalData(self, xKey, yKey, mKey, xSample, ySample, mSample, numKeyPoints, numSamplePoints, sps, sigType, m1, m2, p1, p2, p3, p4, p5, p6, p7, xof, yof)

    def PointFileDataStream(self, xData_Out, yData_Out, mData_Out):
        r"""
        PointFileDataStream(self, xData_Out, yData_Out, mData_Out) -> unsigned int

        Parameters
        ----------
        xData_Out: float *
        yData_Out: float *
        mData_Out: unsigned char *

        """
        return _MTIDevice.MTIDataGenerator_PointFileDataStream(self, xData_Out, yData_Out, mData_Out)

    def PointTimeFileDataStream(self, xData_Out, yData_Out, mData_Out, tData_Out):
        r"""
        PointTimeFileDataStream(self, xData_Out, yData_Out, mData_Out, tData_Out) -> unsigned int

        Parameters
        ----------
        xData_Out: float *
        yData_Out: float *
        mData_Out: unsigned char *
        tData_Out: float *

        """
        return _MTIDevice.MTIDataGenerator_PointTimeFileDataStream(self, xData_Out, yData_Out, mData_Out, tData_Out)

    def ExportFile(self, filename, xData_In, yData_In, mData_In, numPoints, sps):
        r"""
        ExportFile(self, filename, xData_In, yData_In, mData_In, numPoints, sps)

        Parameters
        ----------
        filename: char const *
        xData_In: float *
        yData_In: float *
        mData_In: unsigned char *
        numPoints: unsigned int
        sps: unsigned int

        """
        return _MTIDevice.MTIDataGenerator_ExportFile(self, filename, xData_In, yData_In, mData_In, numPoints, sps)

    def FilterData(self, xData_In, yData_In, xData_Out, yData_Out, numPoints, zeroPhase):
        r"""
        FilterData(self, xData_In, yData_In, xData_Out, yData_Out, numPoints, zeroPhase)

        Parameters
        ----------
        xData_In: float *
        yData_In: float *
        xData_Out: float *
        yData_Out: float *
        numPoints: unsigned int
        zeroPhase: bool

        """
        return _MTIDevice.MTIDataGenerator_FilterData(self, xData_In, yData_In, xData_Out, yData_Out, numPoints, zeroPhase)

    def PointToPointPattern(self, xData_InOut, yData_InOut, mData_InOut, xPoints_In, yPoints_In, mPoints_In, tPoints_In, nSamples, stepTime, sps, spsMin, spsMax):
        r"""
        PointToPointPattern(self, xData_InOut, yData_InOut, mData_InOut, xPoints_In, yPoints_In, mPoints_In, tPoints_In, nSamples, stepTime, sps, spsMin, spsMax) -> unsigned int

        Parameters
        ----------
        xData_InOut: float *
        yData_InOut: float *
        mData_InOut: unsigned char *
        xPoints_In: float *
        yPoints_In: float *
        mPoints_In: unsigned char *
        tPoints_In: float *
        nSamples: int
        stepTime: float
        sps: unsigned int &
        spsMin: int
        spsMax: int

        """
        return _MTIDevice.MTIDataGenerator_PointToPointPattern(self, xData_InOut, yData_InOut, mData_InOut, xPoints_In, yPoints_In, mPoints_In, tPoints_In, nSamples, stepTime, sps, spsMin, spsMax)

    def LinearRasterPattern(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax):
        r"""
        LinearRasterPattern(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax) -> unsigned int

        Parameters
        ----------
        xData_InOut: float *
        yData_InOut: float *
        mData_InOut: unsigned char *
        xAmp: float
        yAmp: float
        numLines: unsigned int
        numPixels: unsigned int
        lineTime: float
        ppMode: bool
        retrace: bool
        triggerShift: int
        theta: float
        sps: unsigned int &
        spsMin: int
        spsMax: int

        """
        return _MTIDevice.MTIDataGenerator_LinearRasterPattern(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax)

    def LinearRasterPatternImaging(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax):
        r"""
        LinearRasterPatternImaging(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax) -> unsigned int

        Parameters
        ----------
        xData_InOut: float *
        yData_InOut: float *
        mData_InOut: unsigned char *
        xAmp: float
        yAmp: float
        numLines: unsigned int
        numPixels: unsigned int
        lineTime: float
        ppMode: bool
        retrace: bool
        triggerShift: int
        theta: float
        sps: unsigned int &
        spsMin: int
        spsMax: int

        """
        return _MTIDevice.MTIDataGenerator_LinearRasterPatternImaging(self, xData_InOut, yData_InOut, mData_InOut, xAmp, yAmp, numLines, numPixels, lineTime, ppMode, retrace, triggerShift, theta, sps, spsMin, spsMax)

    def InterpolateData(self, xKey_In, yKey_In, mKey_In, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio, onFrac, offFrac):
        r"""
        InterpolateData(self, xKey_In, yKey_In, mKey_In, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio, onFrac, offFrac) -> unsigned int

        Parameters
        ----------
        xKey_In: float *
        yKey_In: float *
        mKey_In: unsigned char *
        xSample: float *
        ySample: float *
        mSample: unsigned char *
        numKeyPoints: unsigned int
        numSamplePoints: unsigned int
        ooRatio: float
        onFrac: float
        offFrac: float

        """
        return _MTIDevice.MTIDataGenerator_InterpolateData(self, xKey_In, yKey_In, mKey_In, xSample, ySample, mSample, numKeyPoints, numSamplePoints, ooRatio, onFrac, offFrac)

    def GenerateImportFileData(self, xKey_InOut, yKey_InOut, mKey_InOut, xSample_InOut, ySample_InOut, mSample_InOut, sps, rr, interpILDA, retrace, oor, onFrac, animType, atime, filtType, fileType, Amplitude, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        r"""
        GenerateImportFileData(self, xKey_InOut, yKey_InOut, mKey_InOut, xSample_InOut, ySample_InOut, mSample_InOut, sps, rr, interpILDA, retrace, oor, onFrac, animType, atime, filtType, fileType, Amplitude, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

        Parameters
        ----------
        xKey_InOut: float *
        yKey_InOut: float *
        mKey_InOut: unsigned char *
        xSample_InOut: float *
        ySample_InOut: float *
        mSample_InOut: unsigned char *
        sps: unsigned int
        rr: float
        interpILDA: bool
        retrace: bool
        oor: float
        onFrac: float
        animType: unsigned int
        atime: float
        filtType: unsigned int
        fileType: unsigned int
        Amplitude: float
        p2: float
        p3: float
        p4: float
        theta: float
        xof: float
        yof: float
        projXfm: bool
        tanXfmTheta: float
        barXfmK: float

        """
        return _MTIDevice.MTIDataGenerator_GenerateImportFileData(self, xKey_InOut, yKey_InOut, mKey_InOut, xSample_InOut, ySample_InOut, mSample_InOut, sps, rr, interpILDA, retrace, oor, onFrac, animType, atime, filtType, fileType, Amplitude, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def CloseCurve(self, xData_InOut, yData_InOut, mData_InOut, numPoints, closePoints, retrace=False):
        r"""
        CloseCurve(self, xData_InOut, yData_InOut, mData_InOut, numPoints, closePoints, retrace=False) -> unsigned int

        Parameters
        ----------
        xData_InOut: float *
        yData_InOut: float *
        mData_InOut: unsigned char *
        numPoints: unsigned int
        closePoints: unsigned int
        retrace: bool

        """
        return _MTIDevice.MTIDataGenerator_CloseCurve(self, xData_InOut, yData_InOut, mData_InOut, numPoints, closePoints, retrace)

# Register MTIDataGenerator in _MTIDevice:
_MTIDevice.MTIDataGenerator_swigregister(MTIDataGenerator)

def MTIDataGenerator_ReadFileParameter(filename, paramName, paramValue=0.):
    r"""
    MTIDataGenerator_ReadFileParameter(filename, paramName, paramValue=0.) -> float

    Parameters
    ----------
    filename: char const *
    paramName: char const *
    paramValue: float

    """
    return _MTIDevice.MTIDataGenerator_ReadFileParameter(filename, paramName, paramValue)


import numpy as np
class MTIDevice(MTIDevice):
    def GetAnalogInputBuffer(self, AI0):
        return _MTIDevice.MTIDevice_GetAnalogInputBuffer(self, AI0, AI0)

    def GetAnalogInputStream(self, DataLength):
        stream_length, sampled_values, indices = _MTIDevice.MTIDevice_GetAnalogInputStream(self, DataLength, DataLength)
        return stream_length, sampled_values, indices.astype(int)

class MTIDataGenerator(MTIDataGenerator):

    def CloseCurve(self, xData, yData, mData, numPoints, closePoints, retrace):
        if(len(xData)<(numPoints + closePoints)):
            xData = np.append(xData, np.ndarray(closePoints,dtype=np.float32))
            yData = np.append(yData, np.ndarray(closePoints,dtype=np.float32))
            mData = np.append(mData, np.ndarray(closePoints,dtype=np.uint8))
        npts = _MTIDevice.MTIDataGenerator_CloseCurve(self, xData, yData, mData, numPoints, closePoints, retrace)
        return npts, xData, yData, mData

    def InterpolateData(self, xKey, yKey, mKey, numKeyPoints, numSamplePoints, ooRatio = 2.5, onFrac = 0.1, offFrac = 0.5):
        sampleBuffer = numSamplePoints*3
        return _MTIDevice.MTIDataGenerator_InterpolateData(self, xKey, yKey, mKey, sampleBuffer, sampleBuffer, sampleBuffer, numKeyPoints, numSamplePoints, ooRatio, onFrac, offFrac)

    def PointTimeFileDataStream(self):
        bufferSize = self.GetPointTimeFileSize()
        return _MTIDevice.MTIDataGenerator_PointTimeFileDataStream(self, bufferSize, bufferSize, bufferSize, bufferSize)

    def PointFileDataStream(self):
        bufferSize = self.GetPointFileSize()
        return _MTIDevice.MTIDataGenerator_PointFileDataStream(self, bufferSize, bufferSize, bufferSize)

    def GenerateImportFileData(self, xKey, yKey, mKey, xSample, ySample, mSample, sps, rr, interpILDA , retrace, oor, onFrac, animType, atime, filtType, fileType, Amplitude, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK):
        return _MTIDevice.MTIDataGenerator_GenerateImportFileData(self, xKey, yKey, mKey, xSample, ySample, mSample, sps, rr, interpILDA , retrace, oor, onFrac, animType, atime, filtType, fileType, Amplitude, p2, p3, p4, theta, xof, yof, projXfm, tanXfmTheta, barXfmK)

    def FilterData(self, xData, yData, numPoints, zeroPhase = True):
        bufferSize = numPoints * 3
        xTemp, yTemp = _MTIDevice.MTIDataGenerator_FilterData(self, xData, yData, bufferSize, bufferSize, numPoints, zeroPhase)
        xFilt = xTemp[:numPoints]
        yFilt = yTemp[:numPoints]
        return xFilt, yFilt


from enum import IntEnum
class MTIError(IntEnum):
    MTI_SUCCESS = MTI_SUCCESS
    MTI_ERR_INVALID_HANDLE = MTI_ERR_INVALID_HANDLE
    MTI_ERR_INVALID_DEVICEID = MTI_ERR_INVALID_DEVICEID
    MTI_ERR_GENERAL = MTI_ERR_GENERAL
    MTI_ERR_SERIALCOMM = MTI_ERR_SERIALCOMM
    MTI_ERR_SERIALCOMM_READ_TIMEOUT = MTI_ERR_SERIALCOMM_READ_TIMEOUT
    MTI_ERR_SERIALCOMM_SERIAL_RESET_FAIL = MTI_ERR_SERIALCOMM_SERIAL_RESET_FAIL
    MTI_ERR_INCORRECT_TARGET_RESPONSE = MTI_ERR_INCORRECT_TARGET_RESPONSE
    MTI_ERR_PARAMETER_OUT_OF_RANGE = MTI_ERR_PARAMETER_OUT_OF_RANGE
    MTI_ERR_SOME_PARAMETERS_CANNOT_BE_SET = MTI_ERR_SOME_PARAMETERS_CANNOT_BE_SET
    MTI_ERR_INVALID_PARAMETER_NAME = MTI_ERR_INVALID_PARAMETER_NAME
    MTI_ERR_CONNECTDEVICE_INVALID_PORTNAME = MTI_ERR_CONNECTDEVICE_INVALID_PORTNAME
    MTI_ERR_CONNECTDEVICE_PORT_NOT_AVAILABLE = MTI_ERR_CONNECTDEVICE_PORT_NOT_AVAILABLE
    MTI_ERR_LOADDEVICEPARAMS_FILE_NOT_FOUND = MTI_ERR_LOADDEVICEPARAMS_FILE_NOT_FOUND

class MTIBlockingMode(IntEnum):
    MTI_BLOCKING_MODE_ERR = MTI_BLOCKING_MODE_ERR
    MTI_BLOCKING_MODE_OFF = MTI_BLOCKING_MODE_OFF
    MTI_BLOCKING_MODE_ON  = MTI_BLOCKING_MODE_ON

class MTIParam(IntEnum):
    HardwareFilterOn = HardwareFilterOn
    VmaxMEMSDriver = VmaxMEMSDriver
    DeviceState = DeviceState
    DeviceErrorRegister = DeviceErrorRegister
    USARTBaudRate = USARTBaudRate
    SampleRate = SampleRate
    HardwareFilterBw = HardwareFilterBw
    VdifferenceMax = VdifferenceMax
    Vbias = Vbias
    OutputOffsets = OutputOffsets
    DataScale = DataScale
    DataRotation = DataRotation
    MEMSDriverEnable = MEMSDriverEnable
    DigitalOutputEnable = DigitalOutputEnable
    LaserModulationEnable = LaserModulationEnable
    BufferOffset = BufferOffset
    DeviceAxes = DeviceAxes
    BootSetting = BootSetting
    DataMode = DataMode
    SyncMode = SyncMode
    DataFormat = DataFormat
    FramesPerSecond = FramesPerSecond
    InterpolationType = InterpolationType
    WaveformType = WaveformType

class MTIAxes(IntEnum):
    Normal = Normal
    FlipXY = FlipXY
    MirrorY = MirrorY
    MirrorY_FlipXY = MirrorY_FlipXY
    MirrorX = MirrorX
    MirrorX_FlipXY = MirrorX_FlipXY
    MirrorX_MirrorY = MirrorX_MirrorY
    MirrorX_MirrorY_FlipXY = MirrorX_MirrorY_FlipXY

class MTIDataMode(IntEnum):
    Sample_Output = Sample_Output
    Sample_And_Analog_Input_Buffer = Sample_And_Analog_Input_Buffer
    Keypoint = Keypoint
    Text = Text
    Waveform = Waveform
    Analog_Input_To_Output = Analog_Input_To_Output
    Sample_And_Analog_Input_Stream = Sample_And_Analog_Input_Stream
    Sample_And_Analog_Input_Track = Sample_And_Analog_Input_Track
    Auto_Track = Auto_Track

class MTISync(IntEnum):
    Output_DOut0 = Output_DOut0
    Output_Inverted_DOut0 = Output_Inverted_DOut0
    Output_Sample_Clock = Output_Sample_Clock
    Output_Start_Trigger = Output_Start_Trigger
    External_Sample_Clock = External_Sample_Clock
    External_Start_Trigger = External_Start_Trigger
    External_Frame_Trigger = External_Frame_Trigger

class MTIBoot(IntEnum):
    Boot_With_Factory_Defaults = Boot_With_Factory_Defaults
    Boot_With_Flash_Device_Params = Boot_With_Flash_Device_Params 
    Boot_With_Flash_Data_And_Autorun = Boot_With_Flash_Data_And_Autorun
    Boot_With_Flash_Data_No_Autorun = Boot_With_Flash_Data_No_Autorun

class MTIDataFormat(IntEnum):
    Standard_XYM = Standard_XYM
    Reduced_XYM = Reduced_XYM
    Reduced_XYRGB = Reduced_XYRGB
    Standard_XYRGB = Standard_XYRGB
    Standard_XYMRGB = Standard_XYMRGB

class MTIFlash(IntEnum):
    Device_Params = Device_Params
    Data_In_Buffer = Data_In_Buffer

class MTIDeviceLimits(IntEnum):
    SampleRate_Min = SampleRate_Min
    SampleRate_Max = SampleRate_Max
    SamplesPerFrame_Min = SamplesPerFrame_Min
    SamplesPerFrame_Max = SamplesPerFrame_Max
    HardwareFilterBw_Min = HardwareFilterBw_Min
    HardwareFilterBw_Max = HardwareFilterBw_Max
    FramesPerSecond_Min = FramesPerSecond_Min
    FramesPerSecond_Max = FramesPerSecond_Max
    VdifferenceMax_Min = VdifferenceMax_Min
    VdifferenceMax_Max = VdifferenceMax_Max
    Vbias_Min = Vbias_Min
    Vbias_Max = Vbias_Max

class MTITrack(IntEnum):
    Threshold = Threshold
    NormalGain = NormalGain
    TangentialGain = TangentialGain
    BufferDelay = BufferDelay
    HitRatio = HitRatio
    EnableSearch = EnableSearch
    EnableOffsetStreaming = EnableOffsetStreaming
    EnableTrack = EnableTrack

class FilterType(IntEnum):
    FilterNone = FilterNone
    FilterBessel = FilterBessel
    FilterButterworth = FilterButterworth
    FilterChebyshevI = FilterChebyshevI
    FilterChebyshevII = FilterChebyshevII
    FilterElliptic = FilterElliptic
    FilterLegendre = FilterLegendre
    FilterIIRGeneric = FilterIIRGeneric

class SpirographType(IntEnum):
    CurveRose = CurveRose
    CurveEpicycloid = CurveEpicycloid
    CurveEpitrochoid = CurveEpitrochoid
    CurveHypocycloid = CurveHypocycloid
    CurveHypotrochoid = CurveHypotrochoid

class ModulationType(IntEnum):
    ModulationNone = ModulationNone
    ModulationAmpl = ModulationAmpl
    ModulationFreq = ModulationFreq

class WaveType(IntEnum):
    WaveSine = WaveSine
    WaveTriangle = WaveTriangle
    WaveSquare = WaveSquare

del(
    MTI_SUCCESS,
    MTI_ERR_INVALID_HANDLE,
    MTI_ERR_INVALID_DEVICEID,
    MTI_ERR_GENERAL,
    MTI_ERR_SERIALCOMM,
    MTI_ERR_SERIALCOMM_READ_TIMEOUT,
    MTI_ERR_SERIALCOMM_SERIAL_RESET_FAIL,
    MTI_ERR_INCORRECT_TARGET_RESPONSE,
    MTI_ERR_PARAMETER_OUT_OF_RANGE,
    MTI_ERR_SOME_PARAMETERS_CANNOT_BE_SET,
    MTI_ERR_INVALID_PARAMETER_NAME,
    MTI_ERR_CONNECTDEVICE_INVALID_PORTNAME,
    MTI_ERR_CONNECTDEVICE_PORT_NOT_AVAILABLE,
    MTI_ERR_LOADDEVICEPARAMS_FILE_NOT_FOUND,
    MTI_BLOCKING_MODE_ERR,
    MTI_BLOCKING_MODE_OFF,
    MTI_BLOCKING_MODE_ON,
    HardwareFilterOn,
    VmaxMEMSDriver,
    DeviceState,
    DeviceErrorRegister,
    USARTBaudRate,
    SampleRate,
    HardwareFilterBw,
    VdifferenceMax,
    Vbias,
    OutputOffsets,
    DataScale,
    DataRotation,
    MEMSDriverEnable,
    DigitalOutputEnable,
    LaserModulationEnable,
    BufferOffset,
    DeviceAxes,
    BootSetting,
    DataMode,
    SyncMode,
    FramesPerSecond,
    InterpolationType,
    WaveformType,
    Normal,
    FlipXY,
    MirrorY,
    MirrorY_FlipXY,
    MirrorX,
    MirrorX_FlipXY,
    MirrorX_MirrorY,
    MirrorX_MirrorY_FlipXY,
    Sample_Output,
    Sample_And_Analog_Input_Buffer,
    Keypoint,
    Text,
    Waveform,
    Analog_Input_To_Output,
    Sample_And_Analog_Input_Stream,
    Sample_And_Analog_Input_Track,
    Auto_Track,
    Output_DOut0,
    Output_Inverted_DOut0,
    Output_Sample_Clock,
    Output_Start_Trigger,
    External_Sample_Clock,
    External_Start_Trigger,
    External_Frame_Trigger,
    Boot_With_Factory_Defaults,
    Boot_With_Flash_Device_Params,
    Boot_With_Flash_Data_And_Autorun,
    Boot_With_Flash_Data_No_Autorun,
    Device_Params,
    Data_In_Buffer,
    SampleRate_Min,
    SampleRate_Max,
    SamplesPerFrame_Min,
    SamplesPerFrame_Max,
    HardwareFilterBw_Min,
    HardwareFilterBw_Max,
    FramesPerSecond_Min,
    FramesPerSecond_Max,
    VdifferenceMax_Min,
    VdifferenceMax_Max,
    Vbias_Min,
    Vbias_Max,
    Threshold,
    NormalGain,
    TangentialGain,
    BufferDelay,
    HitRatio,
    EnableSearch,
    EnableOffsetStreaming,
    EnableTrack,
    FilterNone,
    FilterBessel,
    FilterButterworth,
    FilterChebyshevI,
    FilterChebyshevII,
    FilterElliptic,
    FilterLegendre,
    FilterIIRGeneric,
    CurveRose,
    CurveEpicycloid,
    CurveEpitrochoid,
    CurveHypocycloid,
    CurveHypotrochoid,
    ModulationNone,
    ModulationAmpl,
    ModulationFreq,
    WaveSine,
    WaveTriangle,
    WaveSquare,
)

del IntEnum



